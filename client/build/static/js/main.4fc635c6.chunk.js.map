{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","language","setLanguage","compilerWidth","setCompilerWidth","outputWidth","setOutputWidth","code","setCode","output","setOutput","input","setInput","useEffect","runButton","e","a","console","log","payload","axios","url","method","data","intervalId","setInterval","get","params","id","jobId","dataRes","success","job","error","jobStatus","status","jobOutput","temp","JSON","parse","rmvstring","cmd","split","outp","stderr","replaceAll","replace","trim","clearInterval","out","className","onClick","icon","faPlay","color","value","onChange","target","faKeyboard","style","height","width","placeholder","mode","theme","name","currentCode","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","readOnly","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fc635c6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css'\nimport AceEditor from 'react-ace'\nimport axios from 'axios'\nimport 'ace-builds/src-noconflict/mode-javascript'\nimport 'ace-builds/src-min-noconflict/mode-java'\nimport 'ace-builds/src-min-noconflict/mode-c_cpp'\nimport 'ace-builds/src-min-noconflict/mode-python'\nimport 'ace-builds/src-min-noconflict/mode-text'\nimport 'ace-builds/src-noconflict/theme-monokai'\nimport 'ace-builds/src-noconflict/ext-language_tools'\nimport 'ace-builds/src-noconflict/ext-beautify'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlay,faKeyboard } from '@fortawesome/free-solid-svg-icons'\nimport { useState,useEffect } from 'react';\nimport {baseUrl} from './baseURL'\nfunction App() { \n  const [language, setLanguage] = useState('c_cpp');\n  const [compilerWidth, setCompilerWidth] = useState('60%')\n  const [outputWidth, setOutputWidth] = useState('40%')\n\n  const [code, setCode] = useState(`#include <iostream>\nusing namespace std;\nint main() {\n    cout<<\"Hello World!\";\n    return 0;\n} \n`)\n  const [output,setOutput]=useState('')\n  const [input,setInput]=useState('');\n  useEffect(() => {\n   if(language===\"c_cpp\")setCode(`#include <iostream>\nusing namespace std;\nint main() {\n  cout<<\"Hello World!\";\n  return 0;\n} \n   `)\n   else{\n    setCode(`print(\"Hello World!\")`)\n   }\n  }, [language])\n  const runButton =async (e)=>{\n    console.log(input)\n    var format;\n    if(language==='c_cpp'){\n      format = 'cpp';\n    }else{\n      format = 'py'\n    }\n    var payload = {\n      language: format,\n      code: code,\n      input:input\n    }\n    const {data} = await axios({\n      url: `/api/compiler/run`,\n      method: 'POST',\n      data:payload,\n      })\n      console.log(data)\n          // console.log(response.status)\n      let intervalId;\n      intervalId = setInterval(async()=>{\n        const {data:dataRes} = await axios.get(`/api/compiler/status`,{ params: { id: data.jobId } })\n        const {success,job,error} = dataRes;\n        console.log(error)\n        console.log(success)\n        if(success){\n          const {status: jobStatus, output: jobOutput } = job;\n          if(jobStatus===\"pending\")return;\n          console.log(jobStatus)\n          var outp;\n          if(jobStatus===\"error\"){\n            var temp = JSON.parse(jobOutput);\n            console.log(temp);\n            if(language===\"c_cpp\"){\n            var rmvstring = temp.error.cmd.split(' ')[1]+':';\n            // console.log(rmvstring)\n            // console.log(rmvstring.split(' '))\n            outp = temp.stderr.replaceAll(rmvstring,\"\");\n            }else{\n            var rmvstring = 'File \"'+temp.error.cmd.split(' ')[1]+'\",';\n            console.log(rmvstring)\n            console.log(rmvstring.split(' '))\n            outp = temp.stderr.replaceAll(rmvstring,\"\");\n            }\n            outp = outp.replace(/\\s+/g,' ').trim();\n            console.log(outp)\n          }else{\n            outp = jobOutput;\n          }\n          setOutput(outp);\n          clearInterval(intervalId)\n        }else{\n            console.log(error);\n            var out = error;\n            console.log(out)\n            setOutput(out)\n            clearInterval(intervalId)\n\n        }\n        console.log(dataRes)\n      },1000)    \n  }\n  return (\n    <div className=\"App\">\n      <div className=\"headingMain ace-monokai\">ONLINE IDE</div> \n      <div className=\"ace-monokai sectionAbove\">\n          <div className=\"innerSection1\">          \n          <button onClick={runButton} className=\"buttonRun\"> <FontAwesomeIcon icon={faPlay} color=\"white\"/> <span>Run</span></button>\n          <select\n            className=\"select ace-monokai\"\n            value={language}\n            onChange={(e)=>{setLanguage(e.target.value)}} \n          >\n            <option value=\"c_cpp\">C++</option>\n            <option value=\"python\">Python</option>\n          </select>\n          <button className=\"ace-monokai buttonInput\" onClick={(e)=>{\n            if(outputWidth===\"40%\"){\n            setCompilerWidth(\"100%\");\n            setOutputWidth(\"0%\");\n            }else{\n              setCompilerWidth(\"60%\");\n            setOutputWidth(\"40%\");\n            }\n          }}><span>INPUT</span><FontAwesomeIcon icon={faKeyboard} color=\"white\"/> </button>\n          </div>\n          <div>\n\n          </div>\n          <div>\n            Made by Tushar Chopra\n          </div>\n      </div>\n      <div className=\"main\">\n      <AceEditor\n            className=\"editor\"\n            style={{\n                height: '100vh',\n                width: `${compilerWidth}`,\n            }}\n            placeholder='Start Coding'\n            mode={language}\n            theme='monokai'\n            name='basic-code-editor'\n            onChange={currentCode => setCode(currentCode)}\n            fontSize={18}\n            showPrintMargin={false}\n            showGutter={true}\n            highlightActiveLine={true}\n            value={code}\n            setOptions={{\n                enableBasicAutocompletion: true,\n                enableLiveAutocompletion: true,\n                enableSnippets: true,\n                showLineNumbers: true,\n                tabSize: 4,\n            }}\n        />\n        <div className=\"display ace-monokai\" style={{width:`${outputWidth}`,height:'100vh'}}>\n        <div style={{height:'50vh'}}>\n        <div className=\"ace-monokai headingDisplay\">Input</div>\n        <textarea className=\"ace-monokai output\" value={input} onChange={(e)=>{setInput(e.target.value)}}/>\n        </div>\n        <div className=\"dispalyInner\"style={{height:'50vh'}}>\n        <div className=\"headingDisplay ace-monokai\">Output</div>\n        <textarea className=\"ace-monokai output\" value={output} readOnly></textarea>\n        </div>\n        </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}